var mongoose = require('mongoose');
var tree_config = require('tree_config').metaTreeConfig;
var tree_types = require('tree_config').metaTreeTypes ;
var js_utils = require('js_utils').utils;

exports.suggest = function (term, max, project_name, callback) {
    var data = [];
    js_utils.each_exec(tree_types,
        function (child, next) {
            
            var m = mongoose.model(tree_config[child].table);
            var query = { ProjectName: project_name };
            var term1 = '';
            for (var s in term) term1 += '[' + term[s].toUpperCase() + term[s].toLowerCase() + ']';
            query[tree_config[child].text] = eval('/' + term1 + '/');
            m.find(query, function (err, docs) {
                for (var i in docs) {
                    data.push({ type: child, value: docs[i][tree_config[child].text] });
                    if (data.length == max) callback(data);
                }
                next();
            });
        },
        function () {
            callback(data);
        }, 0);
}

exports.search = function (term, max, project_name, callback) {
    var data = [];
    js_utils.each_exec(tree_types,
        function (child, next) {
            console.log("search:" + child);
            //if (!tree_config[child]) console.log(child);
            var m = mongoose.model(tree_config[child].table);
            var query = { ProjectName: project_name };
            query[tree_config[child].text] = eval('/' + term + '/');
            m.find(query, function (err, docs) {
                for (var i in docs) {
                    data.push({ type: child, data: docs[i], children: [] });
                    if (data.length == max) callback(data);
                }
                next();
            });
        },
        function () {
            callback(data);
        }, 0);
}
