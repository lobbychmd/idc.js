var mongoose = require('mongoose');
var tree_config = require('tree_config').metaTreeConfig;
var js_utils = require('js_utils').utils;
 var _ = require('underscore');


var validateType = {
    last_update: { //value, parent, doc, type, _id
        message: '数据已经更改过，请重新获取', validate: function (dataParams, invokeParams, callback) {
            var m = mongoose.model(type);
            m.findOne({ _id: dataParams._id }, function (err, doc1) {
                if (doc1) {
                    callback((!parent.LastUpdateTime && !doc1.LastUpdateTime) || (new Date(parent.LastUpdateTime).toUTCString() == doc1.LastUpdateTime.toUTCString()));
                }
                else callback(true);
            });
            return null; //必须返回ｎｕｌｌ，　让调用者等待回调
        }
    },
    require: { message: '不能为空', validate: function (dataParams) { return !!dataParams.value || dataParams.value === 0; } },
    parent_module: {
        message: '父节点不存在', validate: function (dataParams, invokeParams,  callback) {
            var m = mongoose.model("MetaModule");
            if (dataParams.value)
              m.findOne({ ModuleID: dataParams.value, ProjectName: dataParams.parent['ProjectName'] }, function (err, doc1) {
                  callback(!!doc1);
              })
            else callback(true);
            return null;
        }
    },
    parent_module_dead: {
        message: '父节点死循环了', validate: function (dataParams, invokeParams,  callback) {
            return null;
        }
    },
    conn_not_defined: {
        message: '数据连接未定义', validate: function (dataParams, invokeParams,  callback) {
            if (dataParams.value){
                var m = mongoose.model("MetaConnection");
                m.findOne({ Alias: dataParams.value, ProjectName: dataParams.parent['ProjectName'] }, function (err, doc1) {
                    callback(!!doc1);
                })
                return null;
            } else callback(true);
        }
    },
    split_not_in_path: {
        message: '未定义', validate: function (dataParams, invokeParams,  callback) {
            if (dataParams.value){
                console.log(dataParams.doc)
                var fields = dataParams.value.trim().split(';');
                for(var i in fields){
                    if (_.indexOf(_.map(dataParams.doc[invokeParams.arrayField], function(item){return item[invokeParams.arrayIdField]}), fields[i]) <0){
                         callback(false, invokeParams.checkField + "中的值'" + fields[i] + "'没有在" + invokeParams.arrayField + "中定义");
                         return ;
                    }
                }
                callback(true);
            } else callback(true);
        }
    },
}

var validateConfig = {
    "MetaModule.LastUpdateTime": ["last_update"],
    "MetaModule.ModuleID": ["require"],
    //"MetaModule.ParentID": ["require", "parent_module"],
    "MetaModule.ParentID": ["parent_module"],
    "MetaModule.Caption": ["require"],
    "MetaQuery.QueryName": ["require"],
    "MetaBiz.ConnAlias": ["conn_not_defined"],
    "MetaQuery.ConnAlias": ["conn_not_defined"],
    "MetaBiz.Scripts.ExpectedRows":["require"],
    "MetaQuery.Params.ParamName": ["require"],
    "MetaField.CharLength": ["require"],
    "MetaTable.TableName": ["require"],
    "MetaTable.Columns.ColumnName": ["require"],
    "MetaTable.Columns.Size": ["require"],
    "MetaTable.Columns.Scale": ["require"],
    "MetaTable.Columns.Precision": ["require"],
    "MetaTable.Columns.Type": ["require"],
    "MetaTable.Indexes.IndexName": ["require"],
    "MetaTable.Indexes.Columns": ["require", {type: "split_not_in_path", params:{arrayField: "Columns", arrayIdField: "ColumnName", checkField:"索引的字段"}}],
}

var getherValids = function (type, prefix, doc,  obj, _id, errCheck) {

    for (var i in obj) {
        if (obj[i].constructor === Array) {
            for (var j in obj[i]) {
                ///console.log(obj[i][j]);
                getherValids(type, prefix + "." + i,doc, obj[i][j], _id, errCheck);
            }
        }
        else {
            var path = prefix + "." + i;
            for (var j in validateConfig) {
                if (path === j) {
                    for (var k in validateConfig[j]) {
                        var vtype = validateConfig[j][k];
                        var v_type = typeof vtype =="string" ? vtype: vtype.type;
                        errCheck.push({ func: validateType[v_type].validate, fields: i, msg: j + validateType[v_type].message, dataParams: {value: obj[i], parent: obj, doc: doc, type: type, _id: _id}, invokeParams:vtype.params });
                    }
                    break;
                }
            }
        }
    }
}
var validateModel = function (type, doc, _id, callback) {
    var errCheck = [];
    getherValids(type, type, doc, doc, _id,errCheck);
    
    var r = { Errors: [] };
    js_utils.each_exec(errCheck,
        function (child, next) {
            var check = child.func(child.dataParams,child.invokeParams, function (ok, err) {
                if (!ok) r.Errors.push({ ErrorMessage: err?err:child.msg, MemberNames: [child.fields] });
                next();
            });
            if (check == null);
            else{
                if (!check) r.Errors.push({ ErrorMessage: child.msg, MemberNames: [child.fields] });
                next();
            }
        },
        function () {
            r.IsValid = r.Errors.length == 0;
            callback(r);
        }, 0);
    
    return r;
}


exports.save = function (type, _id, doc, callback) {
    var m = mongoose.model(tree_config[type].table);
    _id = _id ? _id : doc._id;
    validateModel(tree_config[type].table, doc, _id, function (r) {
        doc.LastUpdateTime = new Date();
        r.ReturnValues = { _id: _id };
        if (r.IsValid) {
            if (_id) {
                //console.log(doc);
                doc = JSON.parse( JSON.stringify( new m(doc)));
                delete doc["_id"];
                
                m.update({ _id: _id }, doc, function (err, numAffected) {
                    if (err) r.Errors.push({ ErrorMessage: JSON.stringify(err) });
                    callback(r);
                });

            } else {
                doc._id = require('mongodb').BSONPure.ObjectID();
                r.ReturnValues["_id"] = doc._id;
                doc = new m(doc);
                if (type == "QuerySrv") doc.SrvType = "Query";
                doc.save(function (err, numAffected) {
                    if (err) r.Errors.push({ErrorMessage: JSON.stringify(err)});
                    callback(r);
                });
            }
        } else callback(r);
    });
    
}


exports.remove = function (type, _id, doc, callback) {
    var m = mongoose.model(tree_config[type].table);
    console.log(doc);
    m.findOne({ _id: _id ? _id : doc._id }, function (err, doc) {
        doc.remove(function (err1, numAffected) {
            var Recyle = mongoose.model("Recyle");
            new Recyle({ Collection: tree_config[type].table, Doc: doc, At: new Date() }).save();
            callback(err1, numAffected);
        });
        
    })
    
}
