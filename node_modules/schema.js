var _ = require("underscore");
var mongoose = require('mongoose');
var Schema = mongoose.Schema;
//var colors = require("colors");

var metaSchema = [
    { tableName: "metaQuery", fields: [
        { fieldName: "QueryName", type: "string", size: 40, allowNull: false },
        { fieldName: "QueryType", type: "smallint", allowNull: false },
        { fieldName: "ConnAlias", type: "string", size: 40, allowNull: true}],
      indeies: [
        {pk: true, fields: ["QueryName"]}
      ]
    },
    { tableName: "metaQueryParams", fields: [
        { fieldName: "ParamName", type: "string", size: 40, allowNull: false },
        { fieldName: "ParamType", type: "smallint", allowNull: false },
        { fieldName: "ParamIdx", type: "smallint", allowNull: false},
        { fieldName: "ParamGroups", type: "string", size: 128, allowNull: true},
        { fieldName: "LikeLeft", type: "boolean",  allowNull: true},
        { fieldName: "LikeRight", type: "boolean", size: 40, allowNull: true},
        { fieldName: "IsNull", type: "string", size: 40, allowNull: true},
        { fieldName: "DefaultValue", type: "string", size: 40, allowNull: true}
      ],
      mapToField: {tableName: "metaQuery", fieldName: "Params"}
    },
    { tableName: "metaQueryScript", fields: [
        { fieldName: "ScriptIdx", type: "smallint", allowNull: false },
        { fieldName: "ScriptType", type: "string", size: 128, allowNull: false},
        { fieldName: "Script", type: "string", size: 40, allowNull: false},
        { fieldName: "MetaColumn", type: "string", size: 40, allowNull: true}
      ],
      mapToField: {tableName: "metaQuery", fieldName: "Scripts"}
    },
    { tableName: "metaBiz", fields: [
        { fieldName: "BizID", type: "string", size: 40, allowNull: false },
        { fieldName: "ConnAlias", type: "string", size: 40, allowNull: true}]
    },
    { tableName: "metaBizCheck", fields: [
        { fieldName: "ParamIdx", type: "smallint", allowNull: false},
        { fieldName: "CheckRepeated", type: "boolean",  allowNull: true},
        { fieldName: "CheckSummary", type: "string", size: 40, allowNull: true },
        { fieldName: "ParamToValidate", type: "string", size: 40, allowNull: false},
        { fieldName: "Type", type: "string", size: 40, allowNull: false },
        { fieldName: "CompareType", type: "string", size: 2, allowNull: true },
        { fieldName: "CheckSQL", type: "string", size: 2048, allowNull: true},
        { fieldName: "ParamToCompare", type: "string", size: 40, allowNull: true},
        { fieldName: "CheckEnabled", type: "boolean", allowNull: false},
        { fieldName: "CheckUpdateFlag", type: "string", size: 3, allowNull: true},
        { fieldName: "CheckExecuteFlag", type: "string", size: 3, allowNull: true}
      ],
      mapToField: {tableName: "metaBiz", fieldName: "Checks"}
    },
    { tableName: "metaBizParams", fields: [
        { fieldName: "ParamName", type: "string", size: 40, allowNull: false },
        { fieldName: "ParamRepeated", type: "boolean", allowNull: false},
        { fieldName: "Output", type: "boolean", allowNull: false},
        { fieldName: "ParamType", type: "smallint", allowNull: true}
      ],
      mapToField: {tableName: "metaBiz", fieldName: "Params"}
    },
    { tableName: "metaBizItems", fields: [
        { fieldName: "ProcIdx", type: "smallint", allowNull: false},
        { fieldName: "InterActive", type: "boolean",  allowNull: false},
        { fieldName: "ProcRepeated", type: "boolean", allowNull: false},
        { fieldName: "ProcSQL", type: "string", size: 40, allowNull: false },
        { fieldName: "ProcSummary", type: "string", size: 255, allowNull: false},
        { fieldName: "ExpectedRows", type: "smallint", allowNull: false },
        { fieldName: "ProcEnabled", type: "boolean", allowNull: false },
        { fieldName: "ProcUpdateFlag", type: "string", size: 3, allowNull: true},
        { fieldName: "ProcExecuteFlag", type: "string", size: 3, allowNull: true}
      ],
      mapToField: {tableName: "metaBiz", fieldName: "Scripts"}
    }
];

    var meta2Mongoose = function (table) {
        var sc = {};
        _.each(table.fields, function (j) {
            sc[j.fieldName] = (j.type=="smallint") || j.type=="integer"? Number :
                (j.type =="boolean"? Boolean: 
                    (j.type.indexOf("date") == 0? Date : String));
        });
        _.each(metaSchema, function (i) {
            if (i.mapToField && i.mapToField.tableName == table.tableName)
                sc[i.mapToField.fieldName] = meta2Mongoose(i);
        });
        return sc;
    }

    exports.metaMongoose = function () {

        _.each(
        _.filter(metaSchema, function (i) { return !i.mapToField; }),
        function (i) {
            var tbName = "M" + i.tableName.substring(1);
            var sc = meta2Mongoose(i);
            sc = _.extend(
                {ProjectName: String, Version: String, HashCode: String}, sc
            );
            console.log( { tbName: tbName, schema: sc });
            mongoose.model(tbName, new Schema(sc), tbName);

        }
    );

    }

    exports.metaDDL = function () {
        return _.map(
    metaSchema,
    function (i) {
        var pk = _.find(i.indeies, function (j) { return j.pk; });
        return "create table " + i.tableName + "(\n" +
        _.map(
            i.fields,
            function (j) {
                return "    " + j.fieldName + (" " + j.type + " ") + (" " + (!j.allowNull ? " not " : "") + "null ");
            }
        ).join(",\n")
        + (pk? ",\n    primary key(" + pk.fields.join(",") + ")" : "") 
        +"\n)";
    }
  ).join("\n");

    }