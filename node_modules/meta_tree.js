var mongoose = require('mongoose');
var tree_config = require('tree_config').metaTreeConfig;
var js_utils = require('js_utils').utils;
//var $ = require('jquery');

var isnull = function (v, defaultv) {
    return v ? v : defaultv;
}

var fill_query = function (k, q, param_values) {
    if (q == null) return null;
    else if (typeof (q) == "string") {
        var reg = /(@\(?([a-zA-Z][a-zA-Z0-9_.]+)\)?)/ig;
        var r = reg.exec(q);
        while (r) {
            var subDoc = r[1].substring(1).indexOf('.') > 0;
            if (subDoc) {
                var result = [];
                var v = param_values[q.substring(1).split('.')[0]];
                for (j in v) {
                   var vj = v[j][q.substring(1).split('.')[1]];
                   if (vj) result.push(vj);
                   else console.log(v[j]);
                }
                return result;
            }
            else q = q.replace(r[1], param_values[r[2]]);
            r = reg.exec(q);
        }
        return q;
   
    }
    else if (q["test"]) return q; //正则
    else if (typeof (q) == "function") return q(param_values);
    else{
        var query = q instanceof Array ? [] : {};
        for (var i in q) query[i] = fill_query(i, q[i], param_values);
        return query;
    }
}

var get_curr_doc = function (node, param_values, callback) {
    if (node._id && tree_config[node.metatype] && tree_config[node.metatype].table) {
        var m = mongoose.model(tree_config[node.metatype].table);
        m.find({ _id: node._id }, function (err, docs) {
            if (docs && docs.length > 0) {
                for (var i in param_values) docs[0][i] = param_values[i];
                callback(docs[0]);
            } else callback(param_values);
        });
    }
    else callback(param_values);
}


exports.inherite = function (query, doc, callback) {
    if (doc) callback(doc);
    else {
        doc = {};
        for (var i in query) {
            if (i == "parent_type") var parent_type = query.parent_type;
            else if (i == "parent_id") var parent_id = query.parent_id;
            else doc[i] = query[i];
        }
        var parent_type = parent_type && parent_type.indexOf('.') > 0 ? parent_type.split('.')[0] : parent_type;
        var inherite = parent_type && tree_config[parent_type] && tree_config[parent_type].newType ? tree_config[parent_type].newType.inherite : null;
        if (inherite) {
            if (!tree_config[parent_type].table && tree_config[parent_type].parent) parent_type = tree_config[parent_type].parent;
            console.log(parent_type);
            if (tree_config[parent_type].table && parent_id) {
                var m = mongoose.model(tree_config[parent_type].table);
                m.findOne({ _id: parent_id }, function (err, parent_doc) {
                    
                    inherite = fill_query(null, inherite, parent_doc);
                    for (var i in inherite) doc[i] = inherite[i];
                    callback(doc);
                });
            }
            else {
                for (var i in inherite) doc[i] = inherite[i];
                callback(doc);
            }
        } else callback(doc);
    }

}

exports.treedata = function (type, _id, param_values, open_nodes, project_name, callback) {
    if (!param_values) param_values = {};

    var currnode = { type: type, _id: _id, types: type.split('.') };
    currnode.maintype = currnode.types.length > 1 ? currnode.types[0] : type;
    currnode.subtype = currnode.types.length > 1 ? currnode.types[1] : null;
    currnode.metatype = (!tree_config[currnode.maintype].table) ? tree_config[currnode.maintype].parent : currnode.maintype;

    get_curr_doc(currnode, param_values, function (pv) {
        pv = JSON.parse(JSON.stringify(pv)); //?????????????????
        if (!pv["ProjectName"]) pv["ProjectName"] = project_name;
        pv["@subType"] = currnode.subtype;

        var conf = tree_config[currnode.maintype];
        var data = [];
        if (conf.children)
            js_utils.each_exec(conf.children,
                function (child, next) {
                    if (!child.type) child.type = currnode.subtype;
                    if (tree_config[child.type] && tree_config[child.type].table) {
                        var m = mongoose.model(tree_config[child.type].table);
                        var query = fill_query(null, child.query, pv);
                        console.log(tree_config[child.type].table);
                        //console.log(query);
                        m.find(query, function (err, docs) {
                            //if (docs) console.log(docs.length);
                            for (var i in docs) data.push({ type: child.type, data: docs[i], children: [] });

                            //列表补充
                            var fullList = child.fullList;
                            if (fullList) {
                                fullList = fill_query(null, fullList, pv);
                                for (key in fullList) { //only one
                                    for (i in fullList[key]) {
                                        if (!js_utils.arrayFind(data, function (obj) { return obj.data[key] == fullList[key][i]; })) {
                                            var data1 = { parent_type: currnode.type, parent_id: currnode._id };
                                            data1[key] = fullList[key][i];
                                            data.push({ type: child.type, data: data1, children: [] });
                                        } //else console.log(fullList[key][i].toLowerCase() + "重复");
                                    }
                                }


                            } //列表补充 end;
                            next();

                        });

                    } else if (child.query == "@A-Z") {
                        var letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                        for (c in letters)
                            data.push({ type: currnode.subtype + "." + "[" + letters[c].toUpperCase() + letters[c].toLowerCase() + "]", data: { caption: letters[c], _id: null }, children: [] });
                        next();
                    } else {
                        data.push({ type: child.type, data: { caption: child.caption, _id: pv._id }, children: [] });
                        next();
                    }
                },
                function () {
                    if (!open_nodes) {
                        callback(data);
                    }
                    else {  //递归children
                        js_utils.each_exec(data,
                            function (childdata, next) {

                                if (open_nodes.indexOf(childdata.type + "." + (childdata.data._id ? childdata.data._id : "")) >= 0) {
                                    exports.treedata(childdata.type, childdata.data._id, {}, open_nodes, project_name, function (subdata) {
                                        childdata.children = subdata;
                                        next();
                                    });
                                }
                                else next();
                            }, function () {
                                callback(data);
                            }, 0);
                    }

                }, 0);
    });
}
