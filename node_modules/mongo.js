var util = require('util');
var mongoose = require('mongoose');
var Schema = mongoose.Schema;
var dburl = 'mongodb://MIS:MISSOLUTION@222.73.240.112/idc';
//var dburl = 'mongodb://MIS:MISSOLUTION@www.qiyoungsoft.com:3000/idc';

exports.connectionstring = dburl;
exports.connect = function (callback) {
    mongoose.connect(dburl, function (err) {
    });
}

exports.disconnect = function(callback){
  mongoose.disconnect(callback);
}

function validator_empty(v) {

    return true;//!!v || v === 0;
};

exports.modules = function (callback) {
    var ms = mongoose.model("MetaModule");
    ms.find({},function (err, docs) {
        callback(err, docs);
    });
}

mongoose.model("MetaModule", new Schema({
    ModuleID: { type: String, validate: [validator_empty, '模块ID不能为空'] },
    Caption: String,
    ProjectName: String, ModulePages: [{
        PageID: String, PageType: String, UI: String, Queries: String, PageFlow: String, PageLookup: String,
        PageFlows: [{ID:String, Summary:String}], PageParams:String
    }],
    LastUpdateTime: Date,Version: String, HashCode: String
}), "MetaModule");

mongoose.model("MetaTheme", new Schema({
    Theme: String, LayoutUI: String, LayoutQueries: String, ProjectName: String,Version: String, HashCode: String
}), "MetaTheme");

mongoose.model("MetaBizSrv", new Schema({
    Name: String, Summary: String,   BizID: String, 
    ProjectName: String, SrvCode: String, 
    Version: String, HashCode: String
}), "MetaBizSrv");

mongoose.model("MetaDataSubscribeSrv", new Schema({
    Name: String, Interval: Number, IntervalUnit: String,  SrvCode: String,ProjectName: String, 
    Items:[{QueueIndex: Number, SourceSrv: String, DestinationSrv: String, DestSrvParams: String, Direction: String, 
        Enabled: Boolean, BatchSize:Number, QueueSummary: String, QueueName: String}],
    Version: String, HashCode: String
}), "MetaSrvQueue");

mongoose.model("MetaDataPublishSrv", new Schema({
    Name: String, IdField: String, SrvCode: String, QueryName : String,ProjectName: String, 
    Version: String, HashCode: String
}), "MetaDataPublishSrv");

mongoose.model("MetaExternalSrv", new Schema({
    Name: String, SrvParams: String, SrvCode: String, SrvType : String,URI : String,ProjectName: String, 
    Version: String, HashCode: String
}), "MetaExternalSrv");

mongoose.model("MetaConnection", new Schema({
    ProjectName: String, Alias: String, Summary: String
}), "MetaTheme");

mongoose.model("Project", new Schema({
    ProjectName: String, LastPlace: String,
    //Owner: { "$ref": String, "$id": String },
    Account: { type: Schema.ObjectId, ref: 'Account' },
    ProjectCode: String, SyncPassword: String,
    Users: [{ type: Schema.ObjectId, ref: 'Account' }]
}), "Project");

mongoose.model("MetaQuery", new Schema({
    QueryName: String,ConnAlias: String,
    ProjectName: String,Version: String, HashCode: String
}), "MetaQuery");

mongoose.model("MetaFunction", new Schema({
    FuncID: String,
    ProjectName: String,Version: String, HashCode: String
}), "MetaFunction");

mongoose.model("MetaBiz", new Schema({
    BizID: String,
    ProjectName: String,Version: String, HashCode: String
}), "MetaBiz");

mongoose.model("MetaField", new Schema({
    FieldName: String,
    ProjectName: String,Version: String, HashCode: String
}), "MetaField");

mongoose.model("MetaTable", new Schema({
    TableName: String,
    ProjectName: String,Version: String, HashCode: String
}), "MetaField");


mongoose.model('Account', new Schema({
    UserNO: String, Password:String, Guest:Boolean
  , UserName: String, Friends: [{ "$ref": String, "$id": String }]
}), "Account");

mongoose.model('AccountPref', new Schema({
    Account: { type: Schema.ObjectId, ref: 'Account' },
    LastPosition: String,
}), "AccountPref");

mongoose.model('AccountProjectPref', new Schema({
    Account: { type: Schema.ObjectId, ref: 'Account' },
    ProjectName: String, 
    LastState: { OpenTabs: [{ Url: String, Text: String, MetaType: String }], OpenNodes: [String], LastIndex: Number }
}), "AccountProjectPref");

mongoose.model('MetaVersion', new Schema({
    ModelId: { type: Schema.ObjectId},
    MetaType: String,
    Version: String,
    At: Date,
    HashCode: String, Script: String, User: Boolean
}), "MetaVersion");

mongoose.model('Recyle', new Schema({
    Collection: String, At: Date
}), "Recyle");

mongoose.model('Blog', new Schema({
    Account: { type: Schema.ObjectId, ref: 'Account' },
    Author: String,
    Title: String,
    Content: String,
    At: Date,
    CommentCount: Number
}), "Blog");


