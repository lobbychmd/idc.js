var mongoose = require('mongoose');
var tree_config = require('tree_config').metaTreeConfig;
var js_utils = require('js_utils').utils;
//var $ = require('jquery');

exports.version_info = function (type, _id, hashcode, callback) {
 
    var m = mongoose.model("MetaVersion");
    m.where("MetaType", type).where("ModelId", _id).desc('Version').run(function (err, verdocs) {
        var ver = verdocs.length > 0 && verdocs[0] && verdocs[0].Version ? parseInt(verdocs[0].Version) : null;
        var hash = verdocs.length > 0 && verdocs[0] ? verdocs[0].HashCode :null;
 
        callback(err, { last_version: ver, need_update: hash != hashcode});
    });
}

exports.add_version = function (type, _id, callback) {
    var m = mongoose.model(type);
    m.findOne({ _id: _id }, function (err, doc) {
        var mv = mongoose.model("MetaVersion");
        mv.where("MetaType", type).where("ModelId", _id).desc('Version').run(function (err1, verdocs) {
            var newver = verdocs.length > 0 && verdocs[0] && verdocs[0].Version ? parseInt(verdocs[0].Version) + 1 : 1000;
            if (newver < 1000) newver = 1000 + newver;
            doc.HashCode = null;
            doc.Version = newver;
            var script = JSON.stringify(doc);
            doc.HashCode = js_utils.hashcode(script);
           // console.log(script);console.log(doc.HashCode); 
            new mv({ MetaType: type, ModelId: _id, Version: newver, Script: script, HashCode: doc.HashCode, At: new Date() }).save(function (err, rows) {
                m.update({_id: _id}, {Version: newver.toString(), HashCode: doc.HashCode}, function(){
                   callback(err?JSON.stringify(err):(rows==1?"ok":rows));
                });
                
            })
        });
    });
}
